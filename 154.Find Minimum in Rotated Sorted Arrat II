/*
Follow up for "Find Minimum in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.

The array may contain duplicates.
*/

class Solution {
public:
    int findMin(vector<int>& nums) {
        int size = nums.size(); 
        if (size == 1) return nums[0]; 
        int left = 0, right = size - 1; 
        int m = INT_MAX;
        while (left < right) {
            int mid = left + (right - left) / 2; 
            if (nums[mid] < nums[left]) right = mid;
            else if (nums[mid] > nums[left]) {
                m = min(m, nums[left]); 
                left = mid + 1;
            }
            else {
                m = min(m, nums[left]);   // [1, 3]
                left ++;
            }
        }
        m = min(m, nums[left]);
        return m;
    }
};